version: "3.9"
volumes:
#  Create a volume core_data that will contain the data, such that when the container is stopped / crashes, the data remains.
  songs_data:  # for 'songs_persistence'.
  playlists_data:  # for 'playlists_persistence'.
  users_data:  # for 'users_persistence'.
  friends_data:  # for 'friends_persistence'.
  feed_data:  # for 'feed_persistence'.

services:
  users_persistence:
    image: docker.io/postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres  # Can be any username & password combination, but we need to use the same combination in the code in 'users'
      - POSTGRES_PASSWORD=postgres
    volumes:
        # Map the users_persistence folder to the docker-entrypoint-initdb.d folder in the container.
        # This will ensure that the necessary files are present in the container for initializing the database(s)
        - ./users_persistence/:/docker-entrypoint-initdb.d
        # Map the psql data from the container to a virtual volume, thus preserving the data after the container is stopped.
        - users_data:/var/lib/postgresql/data
  songs_persistence:
    image: docker.io/postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres  # Can be any username & password combination, but we need to use the same combination in the code in 'songs'
      - POSTGRES_PASSWORD=postgres
    volumes:
      # Map the songs_persistence folder to the docker-entrypoint-initdb.d folder in the container.
      # This will ensure that the necessary files are present in the container for initializing the database(s)
      - ./songs_persistence/:/docker-entrypoint-initdb.d
      # Map the psql data from the container to a virtual volume, thus preserving the data after the container is stopped.
      - songs_data:/var/lib/postgresql/data

  playlists_persistence:
    image: docker.io/postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres  # Can be any username & password combination, but we need to use the same combination in the code in 'songs'
      - POSTGRES_PASSWORD=postgres
    volumes:
      # Map the songs_persistence folder to the docker-entrypoint-initdb.d folder in the container.
      # This will ensure that the necessary files are present in the container for initializing the database(s)
      - ./playlists_persistence/:/docker-entrypoint-initdb.d
      # Map the psql data from the container to a virtual volume, thus preserving the data after the container is stopped.
      - playlists_data:/var/lib/postgresql/data
  friends_persistence:
    image: docker.io/postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres  # Can be any username & password combination, but we need to use the same combination in the code in 'songs'
      - POSTGRES_PASSWORD=postgres
    volumes:
      # Map the songs_persistence folder to the docker-entrypoint-initdb.d folder in the container.
      # This will ensure that the necessary files are present in the container for initializing the database(s)
      - ./friends_persistence/:/docker-entrypoint-initdb.d
      # Map the psql data from the container to a virtual volume, thus preserving the data after the container is stopped.
      - friends_data:/var/lib/postgresql/data
  feed_persistence:
    image: docker.io/postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres  # Can be any username & password combination, but we need to use the same combination in the code in 'songs'
      - POSTGRES_PASSWORD=postgres
    volumes:
        # Map the songs_persistence folder to the docker-entrypoint-initdb.d folder in the container.
        # This will ensure that the necessary files are present in the container for initializing the database(s)
        - ./feed_persistence/:/docker-entrypoint-initdb.d
        # Map the psql data from the container to a virtual volume, thus preserving the data after the container is stopped.
        - feed_data:/var/lib/postgresql/data
  friends:
    build: ./friends
    ports:
      - 5004:5000
    depends_on:
      - friends_persistence
  users:
    build: ./users
    ports:
      - 5003:5000
    depends_on:
      - users_persistence
  songs:
    build: ./songs
    ports:
      - 5001:5000
    depends_on:
      - songs_persistence

  playlists:
    build: ./playlists
    ports:
      - 5002:5000
    depends_on:
      - playlists_persistence
  feed:
    build: ./feed
    ports:
      - 5005:5000
    depends_on:
      - feed_persistence
  gui:
    build: ./gui
    ports:
      - 5000:5000

